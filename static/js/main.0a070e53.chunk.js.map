{"version":3,"sources":["Converter.js","App.js","index.js"],"names":["Converter","useState","downloadSpeed","setDownloadSpeed","speedSelectValue","setSpeedSelectValue","fileSize","setFileSize","fileSizeSelectValue","setFileSizeSelectValue","showResult","setShowResult","secondsToHms","d","Number","h","Math","floor","m","s","className","onSubmit","e","preventDefault","htmlFor","type","onClick","oldSpeed","parseInt","name","id","value","onChange","target","oldSize","time","console","log","result","App","ReactDOM","render","document","getElementById"],"mappings":"0MA6KeA,EA3KG,WAChB,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAgDF,mBAAS,QAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAAgCJ,mBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAsDN,mBAAS,MAA/D,mBAAOO,EAAP,KAA4BC,EAA5B,KACA,EAAoCR,oBAAS,GAA7C,mBAAOS,EAAP,KAAmBC,EAAnB,KAEA,SAASC,EAAaC,GACpBA,EAAIC,OAAOD,GACX,IAAIE,EAAIC,KAAKC,MAAMJ,EAAI,MACnBK,EAAIF,KAAKC,MAAOJ,EAAI,KAAQ,IAC5BM,EAAIH,KAAKC,MAAOJ,EAAI,KAAQ,IAKhC,OAHeE,EAAI,EAAIA,GAAW,IAANA,EAAU,UAAY,YAAc,KACjDG,EAAI,EAAIA,GAAW,IAANA,EAAU,YAAc,cAAgB,KACrDC,EAAI,EAAIA,GAAW,IAANA,EAAU,UAAY,YAAc,IAkDlE,OACE,mCACE,qBAAKC,UAAU,YAAf,SACE,sBAAMC,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBAAzB,SAGE,sBAAKH,UAAU,kBAAf,UACE,sBAAKA,UAAU,QAAf,UACE,0DACA,uEAEF,sBAAKA,UAAU,OAAf,UACE,mEACA,uBAAOI,QAAQ,gBAAf,4BACA,wBACEJ,UAAU,YACVK,KAAK,SACLC,QA7CQ,WACpBvB,GAAiB,SAACwB,GAEhB,OADeC,SAASD,GACN,MAuCV,eAOA,uBACEF,KAAK,OACLI,KAAK,gBACLC,GAAG,gBACHC,MAAO7B,EACP8B,SAAU,SAACV,GAAD,OAAOnB,EAAiBmB,EAAEW,OAAOF,UAE7C,wBACEX,UAAU,YACVK,KAAK,SACLC,QApDQ,WACpBvB,GAAiB,SAACwB,GAEhB,OADeC,SAASD,GACN,MA8CV,eAOA,yBACEE,KAAK,gBACLE,MAAO3B,EACP4B,SAAU,SAACV,GAAD,OAAOjB,EAAoBiB,EAAEW,OAAOF,QAHhD,UAKE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,wBAIJ,sBAAKX,UAAU,OAAf,UACE,qFACA,uBAAOI,QAAQ,WAAf,2BACA,wBACEJ,UAAU,YACVK,KAAK,SACLC,QAjEW,WACvBnB,GAAY,SAAC2B,GAEX,OADcN,SAASM,GACN,MA2DT,eAOA,uBACET,KAAK,OACLI,KAAK,WACLC,GAAG,WACHC,MAAOzB,EACP0B,SAAU,SAACV,GAAD,OAAOf,EAAYe,EAAEW,OAAOF,UAExC,wBACEX,UAAU,YACVK,KAAK,SACLC,QAxEW,WACvBnB,GAAY,SAAC2B,GAEX,OADcN,SAASM,GACN,MAkET,eAOA,yBACEL,KAAK,WACLE,MAAOvB,EACPwB,SAAU,SAACV,GAAD,OAAOb,EAAuBa,EAAEW,OAAOF,QAHnD,UAKE,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,mBAEF,uBACA,wBACEN,KAAK,SACLL,UAAU,MACVM,QAAS,kBAAMf,GAAc,IAH/B,0BAQDD,GACC,qBAAKU,UAAU,OAAf,SACE,qDAtIC,WACb,GAAyB,SAArBhB,GAAuD,OAAxBI,EAEjC,OAAOI,EADIN,GAAYJ,EAAgB,IAIzC,GAAyB,SAArBE,GAAuD,OAAxBI,EAEjC,OAAOI,EADgB,KAAXN,GAAoBJ,EAAgB,IAIlD,GAAyB,SAArBE,GAAuD,OAAxBI,EAA8B,CAC/D,IAAI2B,EAAmB,KAAX7B,GAAqC,KAAhBJ,EAAwB,GAEzD,OADAkC,QAAQC,IAAIF,GACLvB,EAAauB,IAyHUG,GADpB,wBAC4ChC,EAD5C,+BAE4B,OAAxBE,EAA+B,WAAa,WAFhD,kCAIyB,SAArBJ,EACIF,EAAgB,EACC,KAAhBA,EAAwB,EANjC,uBCpJDqC,EAJH,WACV,OAAO,cAAC,EAAD,K,MCATC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0a070e53.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Converter = () => {\r\n  const [downloadSpeed, setDownloadSpeed] = useState(10);\r\n  const [speedSelectValue, setSpeedSelectValue] = useState('Mbps');\r\n  const [fileSize, setFileSize] = useState(1);\r\n  const [fileSizeSelectValue, setFileSizeSelectValue] = useState('GB');\r\n  const [showResult, setShowResult] = useState(false);\r\n\r\n  function secondsToHms(d) {\r\n    d = Number(d);\r\n    var h = Math.floor(d / 3600);\r\n    var m = Math.floor((d % 3600) / 60);\r\n    var s = Math.floor((d % 3600) % 60);\r\n\r\n    var hDisplay = h > 0 ? h + (h === 1 ? ' hour, ' : ' hours, ') : '';\r\n    var mDisplay = m > 0 ? m + (m === 1 ? ' minute, ' : ' minutes, ') : '';\r\n    var sDisplay = s > 0 ? s + (s === 1 ? ' second' : ' seconds') : '';\r\n    return hDisplay + mDisplay + sDisplay;\r\n  }\r\n\r\n  const result = () => {\r\n    if (speedSelectValue === 'Mbps' && fileSizeSelectValue === 'MB') {\r\n      let time = fileSize / (downloadSpeed / 8);\r\n      return secondsToHms(time);\r\n    }\r\n\r\n    if (speedSelectValue === 'Mbps' && fileSizeSelectValue === 'GB') {\r\n      let time = (fileSize * 1024) / (downloadSpeed / 8);\r\n      return secondsToHms(time);\r\n    }\r\n\r\n    if (speedSelectValue === 'Gbps' && fileSizeSelectValue === 'GB') {\r\n      let time = (fileSize * 1024) / ((downloadSpeed * 1024) / 8);\r\n      console.log(time);\r\n      return secondsToHms(time);\r\n    }\r\n  };\r\n\r\n  const increaseSpeed = () => {\r\n    setDownloadSpeed((oldSpeed) => {\r\n      let newSpeed = parseInt(oldSpeed);\r\n      return newSpeed + 1;\r\n    });\r\n  };\r\n\r\n  const decreaseSpeed = () => {\r\n    setDownloadSpeed((oldSpeed) => {\r\n      let newSpeed = parseInt(oldSpeed);\r\n      return newSpeed - 1;\r\n    });\r\n  };\r\n\r\n  const increaseFileSize = () => {\r\n    setFileSize((oldSize) => {\r\n      let newSize = parseInt(oldSize);\r\n      return newSize + 1;\r\n    });\r\n  };\r\n\r\n  const decreaseFileSize = () => {\r\n    setFileSize((oldSize) => {\r\n      let newSize = parseInt(oldSize);\r\n      return newSize - 1;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          {/* Download speed */}\r\n\r\n          <div className=\"vertical-center\">\r\n            <div className=\"title\">\r\n              <h1>Download time calculator</h1>\r\n              <h2>How long will it take to download?</h2>\r\n            </div>\r\n            <div className=\"card\">\r\n              <h2>How fast is your internet speed ?</h2>\r\n              <label htmlFor=\"downloadSpeed\">Download Speed</label>\r\n              <button\r\n                className=\"input-btn\"\r\n                type=\"button\"\r\n                onClick={increaseSpeed}\r\n              >\r\n                +\r\n              </button>\r\n              <input\r\n                type=\"text\"\r\n                name=\"downloadSpeed\"\r\n                id=\"downloadSpeed\"\r\n                value={downloadSpeed}\r\n                onChange={(e) => setDownloadSpeed(e.target.value)}\r\n              />\r\n              <button\r\n                className=\"input-btn\"\r\n                type=\"button\"\r\n                onClick={decreaseSpeed}\r\n              >\r\n                -\r\n              </button>\r\n              <select\r\n                name=\"downloadSpeed\"\r\n                value={speedSelectValue}\r\n                onChange={(e) => setSpeedSelectValue(e.target.value)}\r\n              >\r\n                <option value=\"Mbps\">Mbps</option>\r\n                <option value=\"Gbps\">Gbps</option>\r\n              </select>\r\n            </div>\r\n            {/* FileSize */}\r\n            <div className=\"card\">\r\n              <h2>What is the size of the file you want to download ?</h2>\r\n              <label htmlFor=\"fileSize\">Download Size</label>\r\n              <button\r\n                className=\"input-btn\"\r\n                type=\"button\"\r\n                onClick={increaseFileSize}\r\n              >\r\n                +\r\n              </button>\r\n              <input\r\n                type=\"text\"\r\n                name=\"fileSize\"\r\n                id=\"fileSize\"\r\n                value={fileSize}\r\n                onChange={(e) => setFileSize(e.target.value)}\r\n              />\r\n              <button\r\n                className=\"input-btn\"\r\n                type=\"button\"\r\n                onClick={decreaseFileSize}\r\n              >\r\n                -\r\n              </button>\r\n              <select\r\n                name=\"fileSize\"\r\n                value={fileSizeSelectValue}\r\n                onChange={(e) => setFileSizeSelectValue(e.target.value)}\r\n              >\r\n                <option value=\"MB\">MB</option>\r\n                <option value=\"GB\">GB</option>\r\n              </select>\r\n              <br />\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn\"\r\n                onClick={() => setShowResult(true)}\r\n              >\r\n                Calculate\r\n              </button>\r\n            </div>\r\n            {showResult && (\r\n              <div className=\"card\">\r\n                <h2>\r\n                  {`it would take ${result()} to transfer ${fileSize}\r\n                  ${fileSizeSelectValue === 'GB' ? 'Gigabyte' : 'Megabyte'}\r\n                  at ${\r\n                    speedSelectValue === 'Mbps'\r\n                      ? downloadSpeed / 8\r\n                      : (downloadSpeed * 1024) / 8\r\n                  } MB/s`}\r\n                </h2>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Converter;\r\n","import React from 'react';\r\nimport Converter from './Converter';\r\n\r\nconst App = () => {\r\n  return <Converter />;\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}